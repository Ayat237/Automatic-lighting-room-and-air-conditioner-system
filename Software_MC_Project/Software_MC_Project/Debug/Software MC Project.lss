
Software MC Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00000fb8  0000104c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000c8  008000c8  000010b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018c3  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000926  00000000  00000000  00002acb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cbb  00000000  00000000  000033f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  000040ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a2  00000000  00000000  000042c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010aa  00000000  00000000  00004862  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000590c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3c       	cpi	r26, 0xC8	; 200
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 ec       	ldi	r26, 0xC8	; 200
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3c       	cpi	r26, 0xCE	; 206
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 41 03 	call	0x682	; 0x682 <main>
  8a:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GPIO_setupPinDirection>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
  92:	68 30       	cpi	r22, 0x08	; 8
  94:	08 f0       	brcs	.+2      	; 0x98 <GPIO_setupPinDirection+0x6>
  96:	6f c0       	rjmp	.+222    	; 0x176 <GPIO_setupPinDirection+0xe4>
  98:	84 30       	cpi	r24, 0x04	; 4
  9a:	08 f0       	brcs	.+2      	; 0x9e <GPIO_setupPinDirection+0xc>
  9c:	6c c0       	rjmp	.+216    	; 0x176 <GPIO_setupPinDirection+0xe4>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	01 f1       	breq	.+64     	; 0xe2 <GPIO_setupPinDirection+0x50>
  a2:	30 f0       	brcs	.+12     	; 0xb0 <GPIO_setupPinDirection+0x1e>
  a4:	82 30       	cpi	r24, 0x02	; 2
  a6:	b1 f1       	breq	.+108    	; 0x114 <GPIO_setupPinDirection+0x82>
  a8:	83 30       	cpi	r24, 0x03	; 3
  aa:	09 f4       	brne	.+2      	; 0xae <GPIO_setupPinDirection+0x1c>
  ac:	4c c0       	rjmp	.+152    	; 0x146 <GPIO_setupPinDirection+0xb4>
  ae:	08 95       	ret
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	59 f4       	brne	.+22     	; 0xca <GPIO_setupPinDirection+0x38>
			{
				SET_BIT(DDRA,pin_num);
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <GPIO_setupPinDirection+0x2e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <GPIO_setupPinDirection+0x2a>
  c4:	82 2b       	or	r24, r18
  c6:	8a bb       	out	0x1a, r24	; 26
  c8:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
  ca:	2a b3       	in	r18, 0x1a	; 26
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <GPIO_setupPinDirection+0x44>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <GPIO_setupPinDirection+0x40>
  da:	80 95       	com	r24
  dc:	82 23       	and	r24, r18
  de:	8a bb       	out	0x1a, r24	; 26
  e0:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	59 f4       	brne	.+22     	; 0xfc <GPIO_setupPinDirection+0x6a>
			{
				SET_BIT(DDRB,pin_num);
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <GPIO_setupPinDirection+0x60>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <GPIO_setupPinDirection+0x5c>
  f6:	82 2b       	or	r24, r18
  f8:	87 bb       	out	0x17, r24	; 23
  fa:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
  fc:	27 b3       	in	r18, 0x17	; 23
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_setupPinDirection+0x76>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_setupPinDirection+0x72>
 10c:	80 95       	com	r24
 10e:	82 23       	and	r24, r18
 110:	87 bb       	out	0x17, r24	; 23
 112:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	59 f4       	brne	.+22     	; 0x12e <GPIO_setupPinDirection+0x9c>
			{
				SET_BIT(DDRC,pin_num);
 118:	24 b3       	in	r18, 0x14	; 20
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <GPIO_setupPinDirection+0x92>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <GPIO_setupPinDirection+0x8e>
 128:	82 2b       	or	r24, r18
 12a:	84 bb       	out	0x14, r24	; 20
 12c:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <GPIO_setupPinDirection+0xa8>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <GPIO_setupPinDirection+0xa4>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	84 bb       	out	0x14, r24	; 20
 144:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 146:	41 30       	cpi	r20, 0x01	; 1
 148:	59 f4       	brne	.+22     	; 0x160 <GPIO_setupPinDirection+0xce>
			{
				SET_BIT(DDRD,pin_num);
 14a:	21 b3       	in	r18, 0x11	; 17
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <GPIO_setupPinDirection+0xc4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <GPIO_setupPinDirection+0xc0>
 15a:	82 2b       	or	r24, r18
 15c:	81 bb       	out	0x11, r24	; 17
 15e:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 160:	21 b3       	in	r18, 0x11	; 17
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <GPIO_setupPinDirection+0xda>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <GPIO_setupPinDirection+0xd6>
 170:	80 95       	com	r24
 172:	82 23       	and	r24, r18
 174:	81 bb       	out	0x11, r24	; 17
 176:	08 95       	ret

00000178 <GPIO_writePin>:
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
	if((port_num>=NUM_OF_PORTS) ||(pin_num>=NUM_OF_PINS_PER_PORT)){
 178:	84 30       	cpi	r24, 0x04	; 4
 17a:	08 f0       	brcs	.+2      	; 0x17e <GPIO_writePin+0x6>
 17c:	6f c0       	rjmp	.+222    	; 0x25c <GPIO_writePin+0xe4>
 17e:	68 30       	cpi	r22, 0x08	; 8
 180:	08 f0       	brcs	.+2      	; 0x184 <GPIO_writePin+0xc>
 182:	6c c0       	rjmp	.+216    	; 0x25c <GPIO_writePin+0xe4>

	}
	else{
		switch(port_num){
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	01 f1       	breq	.+64     	; 0x1c8 <GPIO_writePin+0x50>
 188:	30 f0       	brcs	.+12     	; 0x196 <GPIO_writePin+0x1e>
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	b1 f1       	breq	.+108    	; 0x1fa <GPIO_writePin+0x82>
 18e:	83 30       	cpi	r24, 0x03	; 3
 190:	09 f4       	brne	.+2      	; 0x194 <GPIO_writePin+0x1c>
 192:	4c c0       	rjmp	.+152    	; 0x22c <GPIO_writePin+0xb4>
 194:	08 95       	ret
		case 0:

			if(value==LOGIC_HIGH){
 196:	41 30       	cpi	r20, 0x01	; 1
 198:	59 f4       	brne	.+22     	; 0x1b0 <GPIO_writePin+0x38>
				SET_BIT(PORTA,pin_num);
 19a:	2b b3       	in	r18, 0x1b	; 27
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <GPIO_writePin+0x2e>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <GPIO_writePin+0x2a>
 1aa:	82 2b       	or	r24, r18
 1ac:	8b bb       	out	0x1b, r24	; 27
 1ae:	08 95       	ret
			}
			else{
				CLEAR_BIT(PORTA,pin_num);
 1b0:	2b b3       	in	r18, 0x1b	; 27
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <GPIO_writePin+0x44>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <GPIO_writePin+0x40>
 1c0:	80 95       	com	r24
 1c2:	82 23       	and	r24, r18
 1c4:	8b bb       	out	0x1b, r24	; 27
 1c6:	08 95       	ret
			}
			break;

		case 1:
			if(value==LOGIC_HIGH){
 1c8:	41 30       	cpi	r20, 0x01	; 1
 1ca:	59 f4       	brne	.+22     	; 0x1e2 <GPIO_writePin+0x6a>
				SET_BIT(PORTB,pin_num);
 1cc:	28 b3       	in	r18, 0x18	; 24
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <GPIO_writePin+0x60>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <GPIO_writePin+0x5c>
 1dc:	82 2b       	or	r24, r18
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	08 95       	ret
			}
			else{
				CLEAR_BIT(PORTB,pin_num);
 1e2:	28 b3       	in	r18, 0x18	; 24
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <GPIO_writePin+0x76>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <GPIO_writePin+0x72>
 1f2:	80 95       	com	r24
 1f4:	82 23       	and	r24, r18
 1f6:	88 bb       	out	0x18, r24	; 24
 1f8:	08 95       	ret
			}
			break;

		case 2:
			if(value==LOGIC_HIGH){
 1fa:	41 30       	cpi	r20, 0x01	; 1
 1fc:	59 f4       	brne	.+22     	; 0x214 <GPIO_writePin+0x9c>
				SET_BIT(PORTC,pin_num);
 1fe:	25 b3       	in	r18, 0x15	; 21
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <GPIO_writePin+0x92>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <GPIO_writePin+0x8e>
 20e:	82 2b       	or	r24, r18
 210:	85 bb       	out	0x15, r24	; 21
 212:	08 95       	ret
			}
			else{
				CLEAR_BIT(PORTC,pin_num);
 214:	25 b3       	in	r18, 0x15	; 21
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <GPIO_writePin+0xa8>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <GPIO_writePin+0xa4>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	85 bb       	out	0x15, r24	; 21
 22a:	08 95       	ret
			}
			break;

		case 3:
			if(value==LOGIC_HIGH){
 22c:	41 30       	cpi	r20, 0x01	; 1
 22e:	59 f4       	brne	.+22     	; 0x246 <GPIO_writePin+0xce>
				SET_BIT(PORTD,pin_num);
 230:	22 b3       	in	r18, 0x12	; 18
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <GPIO_writePin+0xc4>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <GPIO_writePin+0xc0>
 240:	82 2b       	or	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret
			}
			else{
				CLEAR_BIT(PORTD,pin_num);
 246:	22 b3       	in	r18, 0x12	; 18
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <GPIO_writePin+0xda>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <GPIO_writePin+0xd6>
 256:	80 95       	com	r24
 258:	82 23       	and	r24, r18
 25a:	82 bb       	out	0x12, r24	; 18
 25c:	08 95       	ret

0000025e <LCD_sendCommand>:
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(unsigned char row,unsigned char column,const char*Str){
	LCD_moveCursor(row,column); /* go to to the required LCD position */
	LCD_displayString(Str); /* display the string */
}
 25e:	cf 93       	push	r28
 260:	c8 2f       	mov	r28, r24
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 26c:	89 ef       	ldi	r24, 0xF9	; 249
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <LCD_sendCommand+0x12>
 274:	00 c0       	rjmp	.+0      	; 0x276 <LCD_sendCommand+0x18>
 276:	00 00       	nop
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	62 e0       	ldi	r22, 0x02	; 2
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 282:	89 ef       	ldi	r24, 0xF9	; 249
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <LCD_sendCommand+0x28>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <LCD_sendCommand+0x2e>
 28c:	00 00       	nop
 28e:	c4 fb       	bst	r28, 4
 290:	44 27       	eor	r20, r20
 292:	40 f9       	bld	r20, 0
 294:	63 e0       	ldi	r22, 0x03	; 3
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 29c:	c5 fb       	bst	r28, 5
 29e:	44 27       	eor	r20, r20
 2a0:	40 f9       	bld	r20, 0
 2a2:	64 e0       	ldi	r22, 0x04	; 4
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 2aa:	c6 fb       	bst	r28, 6
 2ac:	44 27       	eor	r20, r20
 2ae:	40 f9       	bld	r20, 0
 2b0:	65 e0       	ldi	r22, 0x05	; 5
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 2b8:	4c 2f       	mov	r20, r28
 2ba:	44 1f       	adc	r20, r20
 2bc:	44 27       	eor	r20, r20
 2be:	44 1f       	adc	r20, r20
 2c0:	66 e0       	ldi	r22, 0x06	; 6
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 2c8:	89 ef       	ldi	r24, 0xF9	; 249
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_sendCommand+0x6e>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCD_sendCommand+0x74>
 2d2:	00 00       	nop
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	62 e0       	ldi	r22, 0x02	; 2
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 2de:	89 ef       	ldi	r24, 0xF9	; 249
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <LCD_sendCommand+0x84>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <LCD_sendCommand+0x8a>
 2e8:	00 00       	nop
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	62 e0       	ldi	r22, 0x02	; 2
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 2f4:	89 ef       	ldi	r24, 0xF9	; 249
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <LCD_sendCommand+0x9a>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <LCD_sendCommand+0xa0>
 2fe:	00 00       	nop
 300:	4c 2f       	mov	r20, r28
 302:	41 70       	andi	r20, 0x01	; 1
 304:	63 e0       	ldi	r22, 0x03	; 3
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 30c:	c1 fb       	bst	r28, 1
 30e:	44 27       	eor	r20, r20
 310:	40 f9       	bld	r20, 0
 312:	64 e0       	ldi	r22, 0x04	; 4
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 31a:	c2 fb       	bst	r28, 2
 31c:	44 27       	eor	r20, r20
 31e:	40 f9       	bld	r20, 0
 320:	65 e0       	ldi	r22, 0x05	; 5
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 328:	c3 fb       	bst	r28, 3
 32a:	44 27       	eor	r20, r20
 32c:	40 f9       	bld	r20, 0
 32e:	66 e0       	ldi	r22, 0x06	; 6
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 336:	89 ef       	ldi	r24, 0xF9	; 249
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <LCD_sendCommand+0xdc>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <LCD_sendCommand+0xe2>
 340:	00 00       	nop
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	62 e0       	ldi	r22, 0x02	; 2
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 34c:	89 ef       	ldi	r24, 0xF9	; 249
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <LCD_sendCommand+0xf2>
 354:	00 c0       	rjmp	.+0      	; 0x356 <LCD_sendCommand+0xf8>
 356:	00 00       	nop
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <LCD_init>:
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
 366:	41 e0       	ldi	r20, 0x01	; 1
 368:	62 e0       	ldi	r22, 0x02	; 2
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
 370:	87 e8       	ldi	r24, 0x87	; 135
 372:	93 e1       	ldi	r25, 0x13	; 19
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <LCD_init+0x18>
 378:	00 c0       	rjmp	.+0      	; 0x37a <LCD_init+0x1e>
 37a:	00 00       	nop
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	66 e0       	ldi	r22, 0x06	; 6
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	65 e0       	ldi	r22, 0x05	; 5
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	64 e0       	ldi	r22, 0x04	; 4
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	63 e0       	ldi	r22, 0x03	; 3
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
 3a4:	83 e3       	ldi	r24, 0x33	; 51
 3a6:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_sendCommand>
 3aa:	82 e3       	ldi	r24, 0x32	; 50
 3ac:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_sendCommand>
 3b0:	88 e2       	ldi	r24, 0x28	; 40
 3b2:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_sendCommand>
 3b6:	8c e0       	ldi	r24, 0x0C	; 12
 3b8:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_sendCommand>
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_sendCommand>
 3c2:	08 95       	ret

000003c4 <LCD_displayChar>:
 3c4:	cf 93       	push	r28
 3c6:	c8 2f       	mov	r28, r24
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 3d2:	89 ef       	ldi	r24, 0xF9	; 249
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <LCD_displayChar+0x12>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <LCD_displayChar+0x18>
 3dc:	00 00       	nop
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	62 e0       	ldi	r22, 0x02	; 2
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 3e8:	89 ef       	ldi	r24, 0xF9	; 249
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <LCD_displayChar+0x28>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <LCD_displayChar+0x2e>
 3f2:	00 00       	nop
 3f4:	c4 fb       	bst	r28, 4
 3f6:	44 27       	eor	r20, r20
 3f8:	40 f9       	bld	r20, 0
 3fa:	63 e0       	ldi	r22, 0x03	; 3
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 402:	c5 fb       	bst	r28, 5
 404:	44 27       	eor	r20, r20
 406:	40 f9       	bld	r20, 0
 408:	64 e0       	ldi	r22, 0x04	; 4
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 410:	c6 fb       	bst	r28, 6
 412:	44 27       	eor	r20, r20
 414:	40 f9       	bld	r20, 0
 416:	65 e0       	ldi	r22, 0x05	; 5
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 41e:	4c 2f       	mov	r20, r28
 420:	44 1f       	adc	r20, r20
 422:	44 27       	eor	r20, r20
 424:	44 1f       	adc	r20, r20
 426:	66 e0       	ldi	r22, 0x06	; 6
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 42e:	89 ef       	ldi	r24, 0xF9	; 249
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 438:	00 00       	nop
 43a:	40 e0       	ldi	r20, 0x00	; 0
 43c:	62 e0       	ldi	r22, 0x02	; 2
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 444:	89 ef       	ldi	r24, 0xF9	; 249
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44e:	00 00       	nop
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	62 e0       	ldi	r22, 0x02	; 2
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 45a:	89 ef       	ldi	r24, 0xF9	; 249
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 464:	00 00       	nop
 466:	4c 2f       	mov	r20, r28
 468:	41 70       	andi	r20, 0x01	; 1
 46a:	63 e0       	ldi	r22, 0x03	; 3
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 472:	c1 fb       	bst	r28, 1
 474:	44 27       	eor	r20, r20
 476:	40 f9       	bld	r20, 0
 478:	64 e0       	ldi	r22, 0x04	; 4
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 480:	c2 fb       	bst	r28, 2
 482:	44 27       	eor	r20, r20
 484:	40 f9       	bld	r20, 0
 486:	65 e0       	ldi	r22, 0x05	; 5
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 48e:	c3 fb       	bst	r28, 3
 490:	44 27       	eor	r20, r20
 492:	40 f9       	bld	r20, 0
 494:	66 e0       	ldi	r22, 0x06	; 6
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 49c:	89 ef       	ldi	r24, 0xF9	; 249
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a6:	00 00       	nop
 4a8:	40 e0       	ldi	r20, 0x00	; 0
 4aa:	62 e0       	ldi	r22, 0x02	; 2
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_writePin>
 4b2:	89 ef       	ldi	r24, 0xF9	; 249
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4bc:	00 00       	nop
 4be:	cf 91       	pop	r28
 4c0:	08 95       	ret

000004c2 <LCD_displayString>:
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	ec 01       	movw	r28, r24
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <LCD_displayString+0xe>
 4ca:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_displayChar>
 4ce:	21 96       	adiw	r28, 0x01	; 1
 4d0:	88 81       	ld	r24, Y
 4d2:	81 11       	cpse	r24, r1
 4d4:	fa cf       	rjmp	.-12     	; 0x4ca <LCD_displayString+0x8>
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void){
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_sendCommand>
 4e2:	08 95       	ret

000004e4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	cd b7       	in	r28, 0x3d	; 61
 4ea:	de b7       	in	r29, 0x3e	; 62
 4ec:	60 97       	sbiw	r28, 0x10	; 16
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	f8 94       	cli
 4f2:	de bf       	out	0x3e, r29	; 62
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	cd bf       	out	0x3d, r28	; 61
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
 4f8:	4a e0       	ldi	r20, 0x0A	; 10
 4fa:	50 e0       	ldi	r21, 0x00	; 0
 4fc:	be 01       	movw	r22, r28
 4fe:	6f 5f       	subi	r22, 0xFF	; 255
 500:	7f 4f       	sbci	r23, 0xFF	; 255
 502:	0e 94 9a 07 	call	0xf34	; 0xf34 <itoa>
	LCD_displayString(buff); /* Display the string */
 506:	ce 01       	movw	r24, r28
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_displayString>
 50e:	60 96       	adiw	r28, 0x10	; 16
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	f8 94       	cli
 514:	de bf       	out	0x3e, r29	; 62
 516:	0f be       	out	0x3f, r0	; 63
 518:	cd bf       	out	0x3d, r28	; 61
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <speed>:
int trry = 0;
int check = 0;
char key;

void speed(void){
	if (x == 0){
 520:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <x>
 524:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <x+0x1>
 528:	00 97       	sbiw	r24, 0x00	; 0
 52a:	11 f4       	brne	.+4      	; 0x530 <speed+0x10>
		OCR0 = 0;
 52c:	1c be       	out	0x3c, r1	; 60
 52e:	08 95       	ret
	}
	else if (x == 1){
 530:	81 30       	cpi	r24, 0x01	; 1
 532:	91 05       	cpc	r25, r1
 534:	19 f4       	brne	.+6      	; 0x53c <speed+0x1c>
		OCR0 = 84;
 536:	84 e5       	ldi	r24, 0x54	; 84
 538:	8c bf       	out	0x3c, r24	; 60
 53a:	08 95       	ret
	}
	else if (x == 2){
 53c:	02 97       	sbiw	r24, 0x02	; 2
 53e:	19 f4       	brne	.+6      	; 0x546 <speed+0x26>
		OCR0 = 192;
 540:	80 ec       	ldi	r24, 0xC0	; 192
 542:	8c bf       	out	0x3c, r24	; 60
 544:	08 95       	ret
	}
	else{
		OCR0 = 255;
 546:	8f ef       	ldi	r24, 0xFF	; 255
 548:	8c bf       	out	0x3c, r24	; 60
 54a:	08 95       	ret

0000054c <adc_init>:
	}
}

void adc_init(){
	// SELECT 128 PreScaler
	SET_BIT(ADCSRA, ADPS0);
 54c:	86 b1       	in	r24, 0x06	; 6
 54e:	81 60       	ori	r24, 0x01	; 1
 550:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA, ADPS1);
 552:	86 b1       	in	r24, 0x06	; 6
 554:	82 60       	ori	r24, 0x02	; 2
 556:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA, ADPS2);
 558:	86 b1       	in	r24, 0x06	; 6
 55a:	84 60       	ori	r24, 0x04	; 4
 55c:	86 b9       	out	0x06, r24	; 6
	// Enable ADC 
	SET_BIT(ADCSRA, ADEN); 
 55e:	86 b1       	in	r24, 0x06	; 6
 560:	80 68       	ori	r24, 0x80	; 128
 562:	86 b9       	out	0x06, r24	; 6
 564:	08 95       	ret

00000566 <read_adc>:
}

uint16_t read_adc (uint8_t ch){
	// Select Vref = 2.56V
	ADMUX = 0xC0;
 566:	90 ec       	ldi	r25, 0xC0	; 192
 568:	97 b9       	out	0x07, r25	; 7
	// Select Channel
	ADMUX |= ch;
 56a:	97 b1       	in	r25, 0x07	; 7
 56c:	89 2b       	or	r24, r25
 56e:	87 b9       	out	0x07, r24	; 7
	// Start Conversation and return the value
	SET_BIT(ADCSRA, ADSC);
 570:	86 b1       	in	r24, 0x06	; 6
 572:	80 64       	ori	r24, 0x40	; 64
 574:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & (1<<ADSC));
 576:	36 99       	sbic	0x06, 6	; 6
 578:	fe cf       	rjmp	.-4      	; 0x576 <read_adc+0x10>
	return ADC;
 57a:	84 b1       	in	r24, 0x04	; 4
 57c:	95 b1       	in	r25, 0x05	; 5
}
 57e:	08 95       	ret

00000580 <keycheck>:

char keycheck(){
	
	CLEAR_BIT(PORTB, 4);	// Select ROW1 in KeyPad
 580:	88 b3       	in	r24, 0x18	; 24
 582:	8f 7e       	andi	r24, 0xEF	; 239
 584:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB, 5);
 586:	88 b3       	in	r24, 0x18	; 24
 588:	80 62       	ori	r24, 0x20	; 32
 58a:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB, 6);
 58c:	88 b3       	in	r24, 0x18	; 24
 58e:	80 64       	ori	r24, 0x40	; 64
 590:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB, 7);
 592:	88 b3       	in	r24, 0x18	; 24
 594:	80 68       	ori	r24, 0x80	; 128
 596:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 598:	8f e3       	ldi	r24, 0x3F	; 63
 59a:	9c e9       	ldi	r25, 0x9C	; 156
 59c:	01 97       	sbiw	r24, 0x01	; 1
 59e:	f1 f7       	brne	.-4      	; 0x59c <keycheck+0x1c>
 5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <keycheck+0x22>
 5a2:	00 00       	nop
	_delay_ms(10);

	if((PIND & 0b00000100) == 0){ // Check COL1 in KeyPad if pressed
 5a4:	82 9b       	sbis	0x10, 2	; 16
 5a6:	4e c0       	rjmp	.+156    	; 0x644 <keycheck+0xc4>
		return '1';
	}
	if((PIND & 0b00001000) == 0){ // Check COL2 in KeyPad if pressed
 5a8:	83 9b       	sbis	0x10, 3	; 16
 5aa:	4e c0       	rjmp	.+156    	; 0x648 <keycheck+0xc8>
		return '2';
	}
	if((PIND & 0b00010000) == 0){ // Check COL3 in KeyPad if pressed
 5ac:	84 9b       	sbis	0x10, 4	; 16
 5ae:	4e c0       	rjmp	.+156    	; 0x64c <keycheck+0xcc>
		return '3';
	}

	SET_BIT(PORTB, 4);
 5b0:	88 b3       	in	r24, 0x18	; 24
 5b2:	80 61       	ori	r24, 0x10	; 16
 5b4:	88 bb       	out	0x18, r24	; 24
	CLEAR_BIT(PORTB, 5); // Select ROW2 in KeyPad
 5b6:	88 b3       	in	r24, 0x18	; 24
 5b8:	8f 7d       	andi	r24, 0xDF	; 223
 5ba:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB, 6);
 5bc:	88 b3       	in	r24, 0x18	; 24
 5be:	80 64       	ori	r24, 0x40	; 64
 5c0:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB, 7);
 5c2:	88 b3       	in	r24, 0x18	; 24
 5c4:	80 68       	ori	r24, 0x80	; 128
 5c6:	88 bb       	out	0x18, r24	; 24
 5c8:	8f e3       	ldi	r24, 0x3F	; 63
 5ca:	9c e9       	ldi	r25, 0x9C	; 156
 5cc:	01 97       	sbiw	r24, 0x01	; 1
 5ce:	f1 f7       	brne	.-4      	; 0x5cc <keycheck+0x4c>
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <keycheck+0x52>
 5d2:	00 00       	nop
	_delay_ms(10);
	
	if((PIND & 0b00000100) == 0){ // Check COL1 in KeyPad if pressed
 5d4:	82 9b       	sbis	0x10, 2	; 16
 5d6:	3c c0       	rjmp	.+120    	; 0x650 <keycheck+0xd0>
		return '4';
	}
	if((PIND & 0b00001000) == 0){ // Check COL2 in KeyPad if pressed
 5d8:	83 9b       	sbis	0x10, 3	; 16
 5da:	3c c0       	rjmp	.+120    	; 0x654 <keycheck+0xd4>
		return '5';
	}
	if((PIND & 0b00010000) == 0){ // Check COL3 in KeyPad if pressed
 5dc:	84 9b       	sbis	0x10, 4	; 16
 5de:	3c c0       	rjmp	.+120    	; 0x658 <keycheck+0xd8>
		return '6';
	}
	
	SET_BIT(PORTB, 4);
 5e0:	88 b3       	in	r24, 0x18	; 24
 5e2:	80 61       	ori	r24, 0x10	; 16
 5e4:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB, 5);
 5e6:	88 b3       	in	r24, 0x18	; 24
 5e8:	80 62       	ori	r24, 0x20	; 32
 5ea:	88 bb       	out	0x18, r24	; 24
	CLEAR_BIT(PORTB, 6); // Select ROW3 in KeyPad
 5ec:	88 b3       	in	r24, 0x18	; 24
 5ee:	8f 7b       	andi	r24, 0xBF	; 191
 5f0:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB, 7);
 5f2:	88 b3       	in	r24, 0x18	; 24
 5f4:	80 68       	ori	r24, 0x80	; 128
 5f6:	88 bb       	out	0x18, r24	; 24
 5f8:	8f e3       	ldi	r24, 0x3F	; 63
 5fa:	9c e9       	ldi	r25, 0x9C	; 156
 5fc:	01 97       	sbiw	r24, 0x01	; 1
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <keycheck+0x7c>
 600:	00 c0       	rjmp	.+0      	; 0x602 <keycheck+0x82>
 602:	00 00       	nop
	_delay_ms(10);

	if((PIND & 0b00000100) == 0){ // Check COL1 in KeyPad if pressed
 604:	82 9b       	sbis	0x10, 2	; 16
 606:	2a c0       	rjmp	.+84     	; 0x65c <keycheck+0xdc>
		return '7';
	}
	if((PIND & 0b00001000) == 0){ // Check COL2 in KeyPad if pressed
 608:	83 9b       	sbis	0x10, 3	; 16
 60a:	2a c0       	rjmp	.+84     	; 0x660 <keycheck+0xe0>
		return '8';
	}
	if((PIND & 0b00010000) == 0){ // Check COL3 in KeyPad if pressed
 60c:	84 9b       	sbis	0x10, 4	; 16
 60e:	2a c0       	rjmp	.+84     	; 0x664 <keycheck+0xe4>
		return '9';
	}
	
	SET_BIT(PORTB, 4);
 610:	88 b3       	in	r24, 0x18	; 24
 612:	80 61       	ori	r24, 0x10	; 16
 614:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB, 5);
 616:	88 b3       	in	r24, 0x18	; 24
 618:	80 62       	ori	r24, 0x20	; 32
 61a:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB, 6);
 61c:	88 b3       	in	r24, 0x18	; 24
 61e:	80 64       	ori	r24, 0x40	; 64
 620:	88 bb       	out	0x18, r24	; 24
	CLEAR_BIT(PORTB, 7); // Select ROW4 in KeyPad
 622:	88 b3       	in	r24, 0x18	; 24
 624:	8f 77       	andi	r24, 0x7F	; 127
 626:	88 bb       	out	0x18, r24	; 24
 628:	8f e3       	ldi	r24, 0x3F	; 63
 62a:	9c e9       	ldi	r25, 0x9C	; 156
 62c:	01 97       	sbiw	r24, 0x01	; 1
 62e:	f1 f7       	brne	.-4      	; 0x62c <keycheck+0xac>
 630:	00 c0       	rjmp	.+0      	; 0x632 <keycheck+0xb2>
 632:	00 00       	nop
	_delay_ms(10);
	
	if((PIND & 0b00000100) == 0){ // Check COL1 in KeyPad if pressed
 634:	82 9b       	sbis	0x10, 2	; 16
 636:	18 c0       	rjmp	.+48     	; 0x668 <keycheck+0xe8>
		return '*';
	}
	if((PIND & 0b00001000) == 0){ // Check COL2 in KeyPad if pressed
 638:	83 9b       	sbis	0x10, 3	; 16
 63a:	18 c0       	rjmp	.+48     	; 0x66c <keycheck+0xec>
		return '0';
	}
	if((PIND & 0b00010000) == 0){ // Check COL3 in KeyPad if pressed
 63c:	84 99       	sbic	0x10, 4	; 16
 63e:	18 c0       	rjmp	.+48     	; 0x670 <keycheck+0xf0>
		return '#';
 640:	83 e2       	ldi	r24, 0x23	; 35
 642:	08 95       	ret
	SET_BIT(PORTB, 6);
	SET_BIT(PORTB, 7);
	_delay_ms(10);

	if((PIND & 0b00000100) == 0){ // Check COL1 in KeyPad if pressed
		return '1';
 644:	81 e3       	ldi	r24, 0x31	; 49
 646:	08 95       	ret
	}
	if((PIND & 0b00001000) == 0){ // Check COL2 in KeyPad if pressed
		return '2';
 648:	82 e3       	ldi	r24, 0x32	; 50
 64a:	08 95       	ret
	}
	if((PIND & 0b00010000) == 0){ // Check COL3 in KeyPad if pressed
		return '3';
 64c:	83 e3       	ldi	r24, 0x33	; 51
 64e:	08 95       	ret
	SET_BIT(PORTB, 6);
	SET_BIT(PORTB, 7);
	_delay_ms(10);
	
	if((PIND & 0b00000100) == 0){ // Check COL1 in KeyPad if pressed
		return '4';
 650:	84 e3       	ldi	r24, 0x34	; 52
 652:	08 95       	ret
	}
	if((PIND & 0b00001000) == 0){ // Check COL2 in KeyPad if pressed
		return '5';
 654:	85 e3       	ldi	r24, 0x35	; 53
 656:	08 95       	ret
	}
	if((PIND & 0b00010000) == 0){ // Check COL3 in KeyPad if pressed
		return '6';
 658:	86 e3       	ldi	r24, 0x36	; 54
 65a:	08 95       	ret
	CLEAR_BIT(PORTB, 6); // Select ROW3 in KeyPad
	SET_BIT(PORTB, 7);
	_delay_ms(10);

	if((PIND & 0b00000100) == 0){ // Check COL1 in KeyPad if pressed
		return '7';
 65c:	87 e3       	ldi	r24, 0x37	; 55
 65e:	08 95       	ret
	}
	if((PIND & 0b00001000) == 0){ // Check COL2 in KeyPad if pressed
		return '8';
 660:	88 e3       	ldi	r24, 0x38	; 56
 662:	08 95       	ret
	}
	if((PIND & 0b00010000) == 0){ // Check COL3 in KeyPad if pressed
		return '9';
 664:	89 e3       	ldi	r24, 0x39	; 57
 666:	08 95       	ret
	SET_BIT(PORTB, 6);
	CLEAR_BIT(PORTB, 7); // Select ROW4 in KeyPad
	_delay_ms(10);
	
	if((PIND & 0b00000100) == 0){ // Check COL1 in KeyPad if pressed
		return '*';
 668:	8a e2       	ldi	r24, 0x2A	; 42
 66a:	08 95       	ret
	}
	if((PIND & 0b00001000) == 0){ // Check COL2 in KeyPad if pressed
		return '0';
 66c:	80 e3       	ldi	r24, 0x30	; 48
 66e:	08 95       	ret
	if((PIND & 0b00010000) == 0){ // Check COL3 in KeyPad if pressed
		return '#';
	}
	
	// Return Flag 'a' 
	return 'a';
 670:	81 e6       	ldi	r24, 0x61	; 97
}
 672:	08 95       	ret

00000674 <scankey>:

char scankey(){
	char key = 'a';
 674:	81 e6       	ldi	r24, 0x61	; 97
	// If the returned value from keypad is 'a'
	// Its means that is no button is clicked
	while(key == 'a'){
 676:	02 c0       	rjmp	.+4      	; 0x67c <scankey+0x8>
		key = keycheck();
 678:	0e 94 c0 02 	call	0x580	; 0x580 <keycheck>

char scankey(){
	char key = 'a';
	// If the returned value from keypad is 'a'
	// Its means that is no button is clicked
	while(key == 'a'){
 67c:	81 36       	cpi	r24, 0x61	; 97
 67e:	e1 f3       	breq	.-8      	; 0x678 <scankey+0x4>
		key = keycheck();
	}
	return key;
}
 680:	08 95       	ret

00000682 <main>:

int main()
{
 682:	2f 92       	push	r2
 684:	3f 92       	push	r3
 686:	4f 92       	push	r4
 688:	5f 92       	push	r5
 68a:	6f 92       	push	r6
 68c:	7f 92       	push	r7
 68e:	8f 92       	push	r8
 690:	9f 92       	push	r9
 692:	af 92       	push	r10
 694:	bf 92       	push	r11
 696:	cf 92       	push	r12
 698:	df 92       	push	r13
 69a:	ef 92       	push	r14
 69c:	ff 92       	push	r15
 69e:	0f 93       	push	r16
 6a0:	1f 93       	push	r17
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
 6aa:	27 97       	sbiw	r28, 0x07	; 7
 6ac:	0f b6       	in	r0, 0x3f	; 63
 6ae:	f8 94       	cli
 6b0:	de bf       	out	0x3e, r29	; 62
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	cd bf       	out	0x3d, r28	; 61
	//Initialization
	LCD_init();
 6b6:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_init>
	adc_init();
 6ba:	0e 94 a6 02 	call	0x54c	; 0x54c <adc_init>
	DDRB = 0xF0; // For KeyPad
 6be:	80 ef       	ldi	r24, 0xF0	; 240
 6c0:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x07; // For LEDS
 6c2:	87 e0       	ldi	r24, 0x07	; 7
 6c4:	84 bb       	out	0x14, r24	; 20
	DDRB |= (1 << PB3);
 6c6:	87 b3       	in	r24, 0x17	; 23
 6c8:	88 60       	ori	r24, 0x08	; 8
 6ca:	87 bb       	out	0x17, r24	; 23
	OCR0 = 0; // For Motor
 6cc:	1c be       	out	0x3c, r1	; 60
	TCCR0 |= (1 << COM01)|(1 << WGM00)|(1 << WGM01); // PWM
 6ce:	83 b7       	in	r24, 0x33	; 51
 6d0:	88 66       	ori	r24, 0x68	; 104
 6d2:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01); // PWM
 6d4:	83 b7       	in	r24, 0x33	; 51
 6d6:	82 60       	ori	r24, 0x02	; 2
 6d8:	83 bf       	out	0x33, r24	; 51
	SET_BIT(PORTC, 0);
 6da:	85 b3       	in	r24, 0x15	; 21
 6dc:	81 60       	ori	r24, 0x01	; 1
 6de:	85 bb       	out	0x15, r24	; 21
	CLEAR_BIT(PORTC, 1);
 6e0:	85 b3       	in	r24, 0x15	; 21
 6e2:	8d 7f       	andi	r24, 0xFD	; 253
 6e4:	85 bb       	out	0x15, r24	; 21
	uint16_t digital_LDR;
	float analog_LDR = 0.0;
	float temp2_value = 0.0;
	float copy2;
	//Password Checker
	while(check == 0 && try <= 3){
 6e6:	77 c0       	rjmp	.+238    	; 0x7d6 <main+0x154>
		char key;
		char password[3];
		LCD_clearScreen();
 6e8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_clearScreen>
		if (trry == 0){
 6ec:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <trry>
 6f0:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <trry+0x1>
 6f4:	00 97       	sbiw	r24, 0x00	; 0
 6f6:	41 f4       	brne	.+16     	; 0x708 <main+0x86>
			LCD_displayString("  Enter Password:");
 6f8:	82 e6       	ldi	r24, 0x62	; 98
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_displayString>
			LCD_sendCommand(0xC0);
 700:	80 ec       	ldi	r24, 0xC0	; 192
 702:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_sendCommand>
 706:	09 c0       	rjmp	.+18     	; 0x71a <main+0x98>
			}else if(trry == 1){
 708:	01 97       	sbiw	r24, 0x01	; 1
 70a:	39 f4       	brne	.+14     	; 0x71a <main+0x98>
			LCD_displayString("  Try Again...");
 70c:	84 e7       	ldi	r24, 0x74	; 116
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_displayString>
			LCD_sendCommand(0xC0);
 714:	80 ec       	ldi	r24, 0xC0	; 192
 716:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_sendCommand>
	}
	return key;
}

int main()
{
 71a:	00 e0       	ldi	r16, 0x00	; 0
 71c:	10 e0       	ldi	r17, 0x00	; 0
 71e:	18 c0       	rjmp	.+48     	; 0x750 <main+0xce>
			}else if(trry == 1){
			LCD_displayString("  Try Again...");
			LCD_sendCommand(0xC0);
		}
		for(int i = 0; i < 3 ; i++){
			key = scankey();
 720:	0e 94 3a 03 	call	0x674	; 0x674 <scankey>
 724:	b8 2e       	mov	r11, r24
 726:	2f ef       	ldi	r18, 0xFF	; 255
 728:	81 ee       	ldi	r24, 0xE1	; 225
 72a:	94 e0       	ldi	r25, 0x04	; 4
 72c:	21 50       	subi	r18, 0x01	; 1
 72e:	80 40       	sbci	r24, 0x00	; 0
 730:	90 40       	sbci	r25, 0x00	; 0
 732:	e1 f7       	brne	.-8      	; 0x72c <main+0xaa>
 734:	00 c0       	rjmp	.+0      	; 0x736 <main+0xb4>
 736:	00 00       	nop
			_delay_ms(100);
			LCD_displayChar(key);
 738:	8b 2d       	mov	r24, r11
 73a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_displayChar>
			password[i] = key;
 73e:	e1 e0       	ldi	r30, 0x01	; 1
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	ec 0f       	add	r30, r28
 744:	fd 1f       	adc	r31, r29
 746:	e0 0f       	add	r30, r16
 748:	f1 1f       	adc	r31, r17
 74a:	b0 82       	st	Z, r11
			LCD_sendCommand(0xC0);
			}else if(trry == 1){
			LCD_displayString("  Try Again...");
			LCD_sendCommand(0xC0);
		}
		for(int i = 0; i < 3 ; i++){
 74c:	0f 5f       	subi	r16, 0xFF	; 255
 74e:	1f 4f       	sbci	r17, 0xFF	; 255
 750:	03 30       	cpi	r16, 0x03	; 3
 752:	11 05       	cpc	r17, r1
 754:	2c f3       	brlt	.-54     	; 0x720 <main+0x9e>
			key = scankey();
			_delay_ms(100);
			LCD_displayChar(key);
			password[i] = key;
		}
		if(password[0] == '1' && password[1] == '2' && password[2] == '3'){
 756:	89 81       	ldd	r24, Y+1	; 0x01
 758:	81 33       	cpi	r24, 0x31	; 49
 75a:	29 f5       	brne	.+74     	; 0x7a6 <main+0x124>
 75c:	8a 81       	ldd	r24, Y+2	; 0x02
 75e:	82 33       	cpi	r24, 0x32	; 50
 760:	11 f5       	brne	.+68     	; 0x7a6 <main+0x124>
 762:	8b 81       	ldd	r24, Y+3	; 0x03
 764:	83 33       	cpi	r24, 0x33	; 51
 766:	f9 f4       	brne	.+62     	; 0x7a6 <main+0x124>
 768:	2f ef       	ldi	r18, 0xFF	; 255
 76a:	81 ee       	ldi	r24, 0xE1	; 225
 76c:	94 e0       	ldi	r25, 0x04	; 4
 76e:	21 50       	subi	r18, 0x01	; 1
 770:	80 40       	sbci	r24, 0x00	; 0
 772:	90 40       	sbci	r25, 0x00	; 0
 774:	e1 f7       	brne	.-8      	; 0x76e <main+0xec>
 776:	00 c0       	rjmp	.+0      	; 0x778 <main+0xf6>
 778:	00 00       	nop
			_delay_ms(100);
			LCD_clearScreen();
 77a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_clearScreen>
			LCD_displayString("   Welcome :)");
 77e:	83 e8       	ldi	r24, 0x83	; 131
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_displayString>
 786:	2f ef       	ldi	r18, 0xFF	; 255
 788:	8d e3       	ldi	r24, 0x3D	; 61
 78a:	99 e4       	ldi	r25, 0x49	; 73
 78c:	21 50       	subi	r18, 0x01	; 1
 78e:	80 40       	sbci	r24, 0x00	; 0
 790:	90 40       	sbci	r25, 0x00	; 0
 792:	e1 f7       	brne	.-8      	; 0x78c <main+0x10a>
 794:	00 c0       	rjmp	.+0      	; 0x796 <main+0x114>
 796:	00 00       	nop
			_delay_ms(1500);
			check = 1;
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__data_end+0x1>
 7a0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__data_end>
 7a4:	25 c0       	rjmp	.+74     	; 0x7f0 <main+0x16e>
			break;
			}else{
			trry = 1;
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <trry+0x1>
 7ae:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <trry>
			try++;
 7b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7b6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 7ba:	01 96       	adiw	r24, 0x01	; 1
 7bc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 7c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 7c4:	2f ef       	ldi	r18, 0xFF	; 255
 7c6:	81 ee       	ldi	r24, 0xE1	; 225
 7c8:	94 e0       	ldi	r25, 0x04	; 4
 7ca:	21 50       	subi	r18, 0x01	; 1
 7cc:	80 40       	sbci	r24, 0x00	; 0
 7ce:	90 40       	sbci	r25, 0x00	; 0
 7d0:	e1 f7       	brne	.-8      	; 0x7ca <main+0x148>
 7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <main+0x152>
 7d4:	00 00       	nop
	uint16_t digital_LDR;
	float analog_LDR = 0.0;
	float temp2_value = 0.0;
	float copy2;
	//Password Checker
	while(check == 0 && try <= 3){
 7d6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__data_end>
 7da:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <__data_end+0x1>
 7de:	89 2b       	or	r24, r25
 7e0:	39 f4       	brne	.+14     	; 0x7f0 <main+0x16e>
 7e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7e6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 7ea:	04 97       	sbiw	r24, 0x04	; 4
 7ec:	0c f4       	brge	.+2      	; 0x7f0 <main+0x16e>
 7ee:	7c cf       	rjmp	.-264    	; 0x6e8 <main+0x66>
			try++;
			_delay_ms(100);
		}
	}
	//If Right Password
	if(check == 1){
 7f0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__data_end>
 7f4:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <__data_end+0x1>
 7f8:	01 97       	sbiw	r24, 0x01	; 1
 7fa:	51 f0       	breq	.+20     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7fc:	35 c1       	rjmp	.+618    	; 0xa68 <__stack+0x209>
 7fe:	7a 2c       	mov	r7, r10
 800:	6b 2c       	mov	r6, r11
 802:	50 2e       	mov	r5, r16
 804:	41 2e       	mov	r4, r17
 806:	2c 82       	std	Y+4, r2	; 0x04
 808:	3d 82       	std	Y+5, r3	; 0x05
 80a:	8e 82       	std	Y+6, r8	; 0x06
 80c:	9f 82       	std	Y+7, r9	; 0x07
 80e:	08 c0       	rjmp	.+16     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 810:	1c 82       	std	Y+4, r1	; 0x04
 812:	1d 82       	std	Y+5, r1	; 0x05
 814:	1e 82       	std	Y+6, r1	; 0x06
 816:	1f 82       	std	Y+7, r1	; 0x07
 818:	71 2c       	mov	r7, r1
 81a:	61 2c       	mov	r6, r1
 81c:	51 2c       	mov	r5, r1
 81e:	41 2c       	mov	r4, r1
		while(1){
			//Configuration
			CLEAR_BIT(PORTC, 0);
 820:	85 b3       	in	r24, 0x15	; 21
 822:	8e 7f       	andi	r24, 0xFE	; 254
 824:	85 bb       	out	0x15, r24	; 21
			SET_BIT(PORTC, 1);
 826:	85 b3       	in	r24, 0x15	; 21
 828:	82 60       	ori	r24, 0x02	; 2
 82a:	85 bb       	out	0x15, r24	; 21
			digital_temp = read_adc(0);
 82c:	80 e0       	ldi	r24, 0x00	; 0
 82e:	0e 94 b3 02 	call	0x566	; 0x566 <read_adc>
			temp_value = analog_temp;
			analog_temp = (((digital_temp *5.0) /1023) * 100)/2;
 832:	bc 01       	movw	r22, r24
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 76 06 	call	0xcec	; 0xcec <__floatunsisf>
 83c:	20 e0       	ldi	r18, 0x00	; 0
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	40 ea       	ldi	r20, 0xA0	; 160
 842:	50 e4       	ldi	r21, 0x40	; 64
 844:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__mulsf3>
 848:	20 e0       	ldi	r18, 0x00	; 0
 84a:	30 ec       	ldi	r19, 0xC0	; 192
 84c:	4f e7       	ldi	r20, 0x7F	; 127
 84e:	54 e4       	ldi	r21, 0x44	; 68
 850:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__divsf3>
 854:	20 e0       	ldi	r18, 0x00	; 0
 856:	30 e0       	ldi	r19, 0x00	; 0
 858:	48 ec       	ldi	r20, 0xC8	; 200
 85a:	52 e4       	ldi	r21, 0x42	; 66
 85c:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__mulsf3>
 860:	20 e0       	ldi	r18, 0x00	; 0
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	40 e0       	ldi	r20, 0x00	; 0
 866:	5f e3       	ldi	r21, 0x3F	; 63
 868:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__mulsf3>
 86c:	a6 2e       	mov	r10, r22
 86e:	b7 2e       	mov	r11, r23
 870:	08 2f       	mov	r16, r24
 872:	19 2f       	mov	r17, r25
			speed();
 874:	0e 94 90 02 	call	0x520	; 0x520 <speed>
			digital_LDR = read_adc(7);
 878:	87 e0       	ldi	r24, 0x07	; 7
 87a:	0e 94 b3 02 	call	0x566	; 0x566 <read_adc>
			temp2_value = analog_LDR;
			analog_LDR = (((digital_LDR *5.0) /1023) * 100);
 87e:	bc 01       	movw	r22, r24
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 76 06 	call	0xcec	; 0xcec <__floatunsisf>
 888:	20 e0       	ldi	r18, 0x00	; 0
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	40 ea       	ldi	r20, 0xA0	; 160
 88e:	50 e4       	ldi	r21, 0x40	; 64
 890:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__mulsf3>
 894:	20 e0       	ldi	r18, 0x00	; 0
 896:	30 ec       	ldi	r19, 0xC0	; 192
 898:	4f e7       	ldi	r20, 0x7F	; 127
 89a:	54 e4       	ldi	r21, 0x44	; 68
 89c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__divsf3>
 8a0:	20 e0       	ldi	r18, 0x00	; 0
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	48 ec       	ldi	r20, 0xC8	; 200
 8a6:	52 e4       	ldi	r21, 0x42	; 66
 8a8:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__mulsf3>
 8ac:	26 2e       	mov	r2, r22
 8ae:	37 2e       	mov	r3, r23
 8b0:	88 2e       	mov	r8, r24
 8b2:	99 2e       	mov	r9, r25
			
			if (temp_value != analog_temp || temp2_value != analog_LDR){
 8b4:	2a 2d       	mov	r18, r10
 8b6:	3b 2d       	mov	r19, r11
 8b8:	40 2f       	mov	r20, r16
 8ba:	51 2f       	mov	r21, r17
 8bc:	67 2d       	mov	r22, r7
 8be:	76 2d       	mov	r23, r6
 8c0:	85 2d       	mov	r24, r5
 8c2:	94 2d       	mov	r25, r4
 8c4:	0e 94 c9 05 	call	0xb92	; 0xb92 <__cmpsf2>
 8c8:	81 11       	cpse	r24, r1
 8ca:	0d c0       	rjmp	.+26     	; 0x8e6 <__stack+0x87>
 8cc:	22 2d       	mov	r18, r2
 8ce:	33 2d       	mov	r19, r3
 8d0:	48 2d       	mov	r20, r8
 8d2:	59 2d       	mov	r21, r9
 8d4:	6c 81       	ldd	r22, Y+4	; 0x04
 8d6:	7d 81       	ldd	r23, Y+5	; 0x05
 8d8:	8e 81       	ldd	r24, Y+6	; 0x06
 8da:	9f 81       	ldd	r25, Y+7	; 0x07
 8dc:	0e 94 c9 05 	call	0xb92	; 0xb92 <__cmpsf2>
 8e0:	88 23       	and	r24, r24
 8e2:	09 f4       	brne	.+2      	; 0x8e6 <__stack+0x87>
 8e4:	43 c0       	rjmp	.+134    	; 0x96c <__stack+0x10d>
				copy1 = analog_temp + 1;
 8e6:	20 e0       	ldi	r18, 0x00	; 0
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	40 e8       	ldi	r20, 0x80	; 128
 8ec:	5f e3       	ldi	r21, 0x3F	; 63
 8ee:	6a 2d       	mov	r22, r10
 8f0:	7b 2d       	mov	r23, r11
 8f2:	80 2f       	mov	r24, r16
 8f4:	91 2f       	mov	r25, r17
 8f6:	0e 94 5d 05 	call	0xaba	; 0xaba <__addsf3>
 8fa:	2b 01       	movw	r4, r22
 8fc:	3c 01       	movw	r6, r24
				copy2 = ((500 - analog_LDR) / 500) * 100;
 8fe:	22 2d       	mov	r18, r2
 900:	33 2d       	mov	r19, r3
 902:	48 2d       	mov	r20, r8
 904:	59 2d       	mov	r21, r9
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	70 e0       	ldi	r23, 0x00	; 0
 90a:	8a ef       	ldi	r24, 0xFA	; 250
 90c:	93 e4       	ldi	r25, 0x43	; 67
 90e:	0e 94 5c 05 	call	0xab8	; 0xab8 <__subsf3>
 912:	20 e0       	ldi	r18, 0x00	; 0
 914:	30 e0       	ldi	r19, 0x00	; 0
 916:	4a ef       	ldi	r20, 0xFA	; 250
 918:	53 e4       	ldi	r21, 0x43	; 67
 91a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__divsf3>
 91e:	20 e0       	ldi	r18, 0x00	; 0
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	48 ec       	ldi	r20, 0xC8	; 200
 924:	52 e4       	ldi	r21, 0x42	; 66
 926:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__mulsf3>
 92a:	6b 01       	movw	r12, r22
 92c:	7c 01       	movw	r14, r24
				LCD_clearScreen();
 92e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_clearScreen>
				LCD_displayString("   Temperature:");
 932:	81 e9       	ldi	r24, 0x91	; 145
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_displayString>
				LCD_intgerToString(copy1);
 93a:	c3 01       	movw	r24, r6
 93c:	b2 01       	movw	r22, r4
 93e:	0e 94 40 06 	call	0xc80	; 0xc80 <__fixsfsi>
 942:	cb 01       	movw	r24, r22
 944:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_intgerToString>
				LCD_sendCommand(0xC0);
 948:	80 ec       	ldi	r24, 0xC0	; 192
 94a:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_sendCommand>
				LCD_displayString("Light: ");
 94e:	81 ea       	ldi	r24, 0xA1	; 161
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_displayString>
				LCD_intgerToString(copy2);
 956:	c7 01       	movw	r24, r14
 958:	b6 01       	movw	r22, r12
 95a:	0e 94 40 06 	call	0xc80	; 0xc80 <__fixsfsi>
 95e:	cb 01       	movw	r24, r22
 960:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_intgerToString>
				LCD_displayString("%");
 964:	89 ea       	ldi	r24, 0xA9	; 169
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_displayString>
			}
			
			if (analog_temp < 20){
 96c:	20 e0       	ldi	r18, 0x00	; 0
 96e:	30 e0       	ldi	r19, 0x00	; 0
 970:	40 ea       	ldi	r20, 0xA0	; 160
 972:	51 e4       	ldi	r21, 0x41	; 65
 974:	6a 2d       	mov	r22, r10
 976:	7b 2d       	mov	r23, r11
 978:	80 2f       	mov	r24, r16
 97a:	91 2f       	mov	r25, r17
 97c:	0e 94 c9 05 	call	0xb92	; 0xb92 <__cmpsf2>
 980:	88 23       	and	r24, r24
 982:	2c f4       	brge	.+10     	; 0x98e <__stack+0x12f>
				x =0;
 984:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <x+0x1>
 988:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <x>
 98c:	50 c0       	rjmp	.+160    	; 0xa2e <__stack+0x1cf>
				}else if (analog_temp >=20 && analog_temp < 25){
 98e:	20 e0       	ldi	r18, 0x00	; 0
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	40 ea       	ldi	r20, 0xA0	; 160
 994:	51 e4       	ldi	r21, 0x41	; 65
 996:	6a 2d       	mov	r22, r10
 998:	7b 2d       	mov	r23, r11
 99a:	80 2f       	mov	r24, r16
 99c:	91 2f       	mov	r25, r17
 99e:	0e 94 28 07 	call	0xe50	; 0xe50 <__gesf2>
 9a2:	88 23       	and	r24, r24
 9a4:	9c f0       	brlt	.+38     	; 0x9cc <__stack+0x16d>
 9a6:	20 e0       	ldi	r18, 0x00	; 0
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	48 ec       	ldi	r20, 0xC8	; 200
 9ac:	51 e4       	ldi	r21, 0x41	; 65
 9ae:	6a 2d       	mov	r22, r10
 9b0:	7b 2d       	mov	r23, r11
 9b2:	80 2f       	mov	r24, r16
 9b4:	91 2f       	mov	r25, r17
 9b6:	0e 94 c9 05 	call	0xb92	; 0xb92 <__cmpsf2>
 9ba:	88 23       	and	r24, r24
 9bc:	3c f4       	brge	.+14     	; 0x9cc <__stack+0x16d>
				x = 1;
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <x+0x1>
 9c6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <x>
 9ca:	31 c0       	rjmp	.+98     	; 0xa2e <__stack+0x1cf>
				}else if (analog_temp >= 25 && analog_temp < 35){
 9cc:	20 e0       	ldi	r18, 0x00	; 0
 9ce:	30 e0       	ldi	r19, 0x00	; 0
 9d0:	48 ec       	ldi	r20, 0xC8	; 200
 9d2:	51 e4       	ldi	r21, 0x41	; 65
 9d4:	6a 2d       	mov	r22, r10
 9d6:	7b 2d       	mov	r23, r11
 9d8:	80 2f       	mov	r24, r16
 9da:	91 2f       	mov	r25, r17
 9dc:	0e 94 28 07 	call	0xe50	; 0xe50 <__gesf2>
 9e0:	88 23       	and	r24, r24
 9e2:	9c f0       	brlt	.+38     	; 0xa0a <__stack+0x1ab>
 9e4:	20 e0       	ldi	r18, 0x00	; 0
 9e6:	30 e0       	ldi	r19, 0x00	; 0
 9e8:	4c e0       	ldi	r20, 0x0C	; 12
 9ea:	52 e4       	ldi	r21, 0x42	; 66
 9ec:	6a 2d       	mov	r22, r10
 9ee:	7b 2d       	mov	r23, r11
 9f0:	80 2f       	mov	r24, r16
 9f2:	91 2f       	mov	r25, r17
 9f4:	0e 94 c9 05 	call	0xb92	; 0xb92 <__cmpsf2>
 9f8:	88 23       	and	r24, r24
 9fa:	3c f4       	brge	.+14     	; 0xa0a <__stack+0x1ab>
				x = 2;
 9fc:	82 e0       	ldi	r24, 0x02	; 2
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <x+0x1>
 a04:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <x>
 a08:	12 c0       	rjmp	.+36     	; 0xa2e <__stack+0x1cf>
				}else if (analog_temp >= 35){
 a0a:	20 e0       	ldi	r18, 0x00	; 0
 a0c:	30 e0       	ldi	r19, 0x00	; 0
 a0e:	4c e0       	ldi	r20, 0x0C	; 12
 a10:	52 e4       	ldi	r21, 0x42	; 66
 a12:	6a 2d       	mov	r22, r10
 a14:	7b 2d       	mov	r23, r11
 a16:	80 2f       	mov	r24, r16
 a18:	91 2f       	mov	r25, r17
 a1a:	0e 94 28 07 	call	0xe50	; 0xe50 <__gesf2>
 a1e:	88 23       	and	r24, r24
 a20:	34 f0       	brlt	.+12     	; 0xa2e <__stack+0x1cf>
				x = 3;
 a22:	83 e0       	ldi	r24, 0x03	; 3
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <x+0x1>
 a2a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <x>
			}
			
			if (copy2 < 50){
 a2e:	20 e0       	ldi	r18, 0x00	; 0
 a30:	30 e0       	ldi	r19, 0x00	; 0
 a32:	48 e4       	ldi	r20, 0x48	; 72
 a34:	52 e4       	ldi	r21, 0x42	; 66
 a36:	c7 01       	movw	r24, r14
 a38:	b6 01       	movw	r22, r12
 a3a:	0e 94 c9 05 	call	0xb92	; 0xb92 <__cmpsf2>
 a3e:	88 23       	and	r24, r24
 a40:	24 f4       	brge	.+8      	; 0xa4a <__stack+0x1eb>
				SET_BIT(PORTC, 2);
 a42:	85 b3       	in	r24, 0x15	; 21
 a44:	84 60       	ori	r24, 0x04	; 4
 a46:	85 bb       	out	0x15, r24	; 21
 a48:	da ce       	rjmp	.-588    	; 0x7fe <main+0x17c>
				}else if(copy2 >= 50){
 a4a:	20 e0       	ldi	r18, 0x00	; 0
 a4c:	30 e0       	ldi	r19, 0x00	; 0
 a4e:	48 e4       	ldi	r20, 0x48	; 72
 a50:	52 e4       	ldi	r21, 0x42	; 66
 a52:	c7 01       	movw	r24, r14
 a54:	b6 01       	movw	r22, r12
 a56:	0e 94 28 07 	call	0xe50	; 0xe50 <__gesf2>
 a5a:	88 23       	and	r24, r24
 a5c:	0c f4       	brge	.+2      	; 0xa60 <__stack+0x201>
 a5e:	cf ce       	rjmp	.-610    	; 0x7fe <main+0x17c>
				CLEAR_BIT(PORTC, 2);
 a60:	85 b3       	in	r24, 0x15	; 21
 a62:	8b 7f       	andi	r24, 0xFB	; 251
 a64:	85 bb       	out	0x15, r24	; 21
 a66:	cb ce       	rjmp	.-618    	; 0x7fe <main+0x17c>
			}
		}
		}else{
		// If Wrong Password
		LCD_clearScreen();
 a68:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_clearScreen>
		LCD_displayString("  Wrong 3 tries");
 a6c:	8b ea       	ldi	r24, 0xAB	; 171
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_displayString>
		LCD_sendCommand(0xC0);
 a74:	80 ec       	ldi	r24, 0xC0	; 192
 a76:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_sendCommand>
		LCD_displayString("good bye :(");
 a7a:	8b eb       	ldi	r24, 0xBB	; 187
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_displayString>
	}
 a82:	80 e0       	ldi	r24, 0x00	; 0
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	27 96       	adiw	r28, 0x07	; 7
 a88:	0f b6       	in	r0, 0x3f	; 63
 a8a:	f8 94       	cli
 a8c:	de bf       	out	0x3e, r29	; 62
 a8e:	0f be       	out	0x3f, r0	; 63
 a90:	cd bf       	out	0x3d, r28	; 61
 a92:	df 91       	pop	r29
 a94:	cf 91       	pop	r28
 a96:	1f 91       	pop	r17
 a98:	0f 91       	pop	r16
 a9a:	ff 90       	pop	r15
 a9c:	ef 90       	pop	r14
 a9e:	df 90       	pop	r13
 aa0:	cf 90       	pop	r12
 aa2:	bf 90       	pop	r11
 aa4:	af 90       	pop	r10
 aa6:	9f 90       	pop	r9
 aa8:	8f 90       	pop	r8
 aaa:	7f 90       	pop	r7
 aac:	6f 90       	pop	r6
 aae:	5f 90       	pop	r5
 ab0:	4f 90       	pop	r4
 ab2:	3f 90       	pop	r3
 ab4:	2f 90       	pop	r2
 ab6:	08 95       	ret

00000ab8 <__subsf3>:
 ab8:	50 58       	subi	r21, 0x80	; 128

00000aba <__addsf3>:
 aba:	bb 27       	eor	r27, r27
 abc:	aa 27       	eor	r26, r26
 abe:	0e 94 74 05 	call	0xae8	; 0xae8 <__addsf3x>
 ac2:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_round>
 ac6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__fp_pscA>
 aca:	38 f0       	brcs	.+14     	; 0xada <__addsf3+0x20>
 acc:	0e 94 e7 06 	call	0xdce	; 0xdce <__fp_pscB>
 ad0:	20 f0       	brcs	.+8      	; 0xada <__addsf3+0x20>
 ad2:	39 f4       	brne	.+14     	; 0xae2 <__addsf3+0x28>
 ad4:	9f 3f       	cpi	r25, 0xFF	; 255
 ad6:	19 f4       	brne	.+6      	; 0xade <__addsf3+0x24>
 ad8:	26 f4       	brtc	.+8      	; 0xae2 <__addsf3+0x28>
 ada:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_nan>
 ade:	0e f4       	brtc	.+2      	; 0xae2 <__addsf3+0x28>
 ae0:	e0 95       	com	r30
 ae2:	e7 fb       	bst	r30, 7
 ae4:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__fp_inf>

00000ae8 <__addsf3x>:
 ae8:	e9 2f       	mov	r30, r25
 aea:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__fp_split3>
 aee:	58 f3       	brcs	.-42     	; 0xac6 <__addsf3+0xc>
 af0:	ba 17       	cp	r27, r26
 af2:	62 07       	cpc	r22, r18
 af4:	73 07       	cpc	r23, r19
 af6:	84 07       	cpc	r24, r20
 af8:	95 07       	cpc	r25, r21
 afa:	20 f0       	brcs	.+8      	; 0xb04 <__addsf3x+0x1c>
 afc:	79 f4       	brne	.+30     	; 0xb1c <__addsf3x+0x34>
 afe:	a6 f5       	brtc	.+104    	; 0xb68 <__addsf3x+0x80>
 b00:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__fp_zero>
 b04:	0e f4       	brtc	.+2      	; 0xb08 <__addsf3x+0x20>
 b06:	e0 95       	com	r30
 b08:	0b 2e       	mov	r0, r27
 b0a:	ba 2f       	mov	r27, r26
 b0c:	a0 2d       	mov	r26, r0
 b0e:	0b 01       	movw	r0, r22
 b10:	b9 01       	movw	r22, r18
 b12:	90 01       	movw	r18, r0
 b14:	0c 01       	movw	r0, r24
 b16:	ca 01       	movw	r24, r20
 b18:	a0 01       	movw	r20, r0
 b1a:	11 24       	eor	r1, r1
 b1c:	ff 27       	eor	r31, r31
 b1e:	59 1b       	sub	r21, r25
 b20:	99 f0       	breq	.+38     	; 0xb48 <__addsf3x+0x60>
 b22:	59 3f       	cpi	r21, 0xF9	; 249
 b24:	50 f4       	brcc	.+20     	; 0xb3a <__addsf3x+0x52>
 b26:	50 3e       	cpi	r21, 0xE0	; 224
 b28:	68 f1       	brcs	.+90     	; 0xb84 <__addsf3x+0x9c>
 b2a:	1a 16       	cp	r1, r26
 b2c:	f0 40       	sbci	r31, 0x00	; 0
 b2e:	a2 2f       	mov	r26, r18
 b30:	23 2f       	mov	r18, r19
 b32:	34 2f       	mov	r19, r20
 b34:	44 27       	eor	r20, r20
 b36:	58 5f       	subi	r21, 0xF8	; 248
 b38:	f3 cf       	rjmp	.-26     	; 0xb20 <__addsf3x+0x38>
 b3a:	46 95       	lsr	r20
 b3c:	37 95       	ror	r19
 b3e:	27 95       	ror	r18
 b40:	a7 95       	ror	r26
 b42:	f0 40       	sbci	r31, 0x00	; 0
 b44:	53 95       	inc	r21
 b46:	c9 f7       	brne	.-14     	; 0xb3a <__addsf3x+0x52>
 b48:	7e f4       	brtc	.+30     	; 0xb68 <__addsf3x+0x80>
 b4a:	1f 16       	cp	r1, r31
 b4c:	ba 0b       	sbc	r27, r26
 b4e:	62 0b       	sbc	r22, r18
 b50:	73 0b       	sbc	r23, r19
 b52:	84 0b       	sbc	r24, r20
 b54:	ba f0       	brmi	.+46     	; 0xb84 <__addsf3x+0x9c>
 b56:	91 50       	subi	r25, 0x01	; 1
 b58:	a1 f0       	breq	.+40     	; 0xb82 <__addsf3x+0x9a>
 b5a:	ff 0f       	add	r31, r31
 b5c:	bb 1f       	adc	r27, r27
 b5e:	66 1f       	adc	r22, r22
 b60:	77 1f       	adc	r23, r23
 b62:	88 1f       	adc	r24, r24
 b64:	c2 f7       	brpl	.-16     	; 0xb56 <__addsf3x+0x6e>
 b66:	0e c0       	rjmp	.+28     	; 0xb84 <__addsf3x+0x9c>
 b68:	ba 0f       	add	r27, r26
 b6a:	62 1f       	adc	r22, r18
 b6c:	73 1f       	adc	r23, r19
 b6e:	84 1f       	adc	r24, r20
 b70:	48 f4       	brcc	.+18     	; 0xb84 <__addsf3x+0x9c>
 b72:	87 95       	ror	r24
 b74:	77 95       	ror	r23
 b76:	67 95       	ror	r22
 b78:	b7 95       	ror	r27
 b7a:	f7 95       	ror	r31
 b7c:	9e 3f       	cpi	r25, 0xFE	; 254
 b7e:	08 f0       	brcs	.+2      	; 0xb82 <__addsf3x+0x9a>
 b80:	b0 cf       	rjmp	.-160    	; 0xae2 <__addsf3+0x28>
 b82:	93 95       	inc	r25
 b84:	88 0f       	add	r24, r24
 b86:	08 f0       	brcs	.+2      	; 0xb8a <__addsf3x+0xa2>
 b88:	99 27       	eor	r25, r25
 b8a:	ee 0f       	add	r30, r30
 b8c:	97 95       	ror	r25
 b8e:	87 95       	ror	r24
 b90:	08 95       	ret

00000b92 <__cmpsf2>:
 b92:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fp_cmp>
 b96:	08 f4       	brcc	.+2      	; 0xb9a <__cmpsf2+0x8>
 b98:	81 e0       	ldi	r24, 0x01	; 1
 b9a:	08 95       	ret

00000b9c <__divsf3>:
 b9c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__divsf3x>
 ba0:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_round>
 ba4:	0e 94 e7 06 	call	0xdce	; 0xdce <__fp_pscB>
 ba8:	58 f0       	brcs	.+22     	; 0xbc0 <__divsf3+0x24>
 baa:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__fp_pscA>
 bae:	40 f0       	brcs	.+16     	; 0xbc0 <__divsf3+0x24>
 bb0:	29 f4       	brne	.+10     	; 0xbbc <__divsf3+0x20>
 bb2:	5f 3f       	cpi	r21, 0xFF	; 255
 bb4:	29 f0       	breq	.+10     	; 0xbc0 <__divsf3+0x24>
 bb6:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__fp_inf>
 bba:	51 11       	cpse	r21, r1
 bbc:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__fp_szero>
 bc0:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_nan>

00000bc4 <__divsf3x>:
 bc4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__fp_split3>
 bc8:	68 f3       	brcs	.-38     	; 0xba4 <__divsf3+0x8>

00000bca <__divsf3_pse>:
 bca:	99 23       	and	r25, r25
 bcc:	b1 f3       	breq	.-20     	; 0xbba <__divsf3+0x1e>
 bce:	55 23       	and	r21, r21
 bd0:	91 f3       	breq	.-28     	; 0xbb6 <__divsf3+0x1a>
 bd2:	95 1b       	sub	r25, r21
 bd4:	55 0b       	sbc	r21, r21
 bd6:	bb 27       	eor	r27, r27
 bd8:	aa 27       	eor	r26, r26
 bda:	62 17       	cp	r22, r18
 bdc:	73 07       	cpc	r23, r19
 bde:	84 07       	cpc	r24, r20
 be0:	38 f0       	brcs	.+14     	; 0xbf0 <__divsf3_pse+0x26>
 be2:	9f 5f       	subi	r25, 0xFF	; 255
 be4:	5f 4f       	sbci	r21, 0xFF	; 255
 be6:	22 0f       	add	r18, r18
 be8:	33 1f       	adc	r19, r19
 bea:	44 1f       	adc	r20, r20
 bec:	aa 1f       	adc	r26, r26
 bee:	a9 f3       	breq	.-22     	; 0xbda <__divsf3_pse+0x10>
 bf0:	35 d0       	rcall	.+106    	; 0xc5c <__divsf3_pse+0x92>
 bf2:	0e 2e       	mov	r0, r30
 bf4:	3a f0       	brmi	.+14     	; 0xc04 <__divsf3_pse+0x3a>
 bf6:	e0 e8       	ldi	r30, 0x80	; 128
 bf8:	32 d0       	rcall	.+100    	; 0xc5e <__divsf3_pse+0x94>
 bfa:	91 50       	subi	r25, 0x01	; 1
 bfc:	50 40       	sbci	r21, 0x00	; 0
 bfe:	e6 95       	lsr	r30
 c00:	00 1c       	adc	r0, r0
 c02:	ca f7       	brpl	.-14     	; 0xbf6 <__divsf3_pse+0x2c>
 c04:	2b d0       	rcall	.+86     	; 0xc5c <__divsf3_pse+0x92>
 c06:	fe 2f       	mov	r31, r30
 c08:	29 d0       	rcall	.+82     	; 0xc5c <__divsf3_pse+0x92>
 c0a:	66 0f       	add	r22, r22
 c0c:	77 1f       	adc	r23, r23
 c0e:	88 1f       	adc	r24, r24
 c10:	bb 1f       	adc	r27, r27
 c12:	26 17       	cp	r18, r22
 c14:	37 07       	cpc	r19, r23
 c16:	48 07       	cpc	r20, r24
 c18:	ab 07       	cpc	r26, r27
 c1a:	b0 e8       	ldi	r27, 0x80	; 128
 c1c:	09 f0       	breq	.+2      	; 0xc20 <__divsf3_pse+0x56>
 c1e:	bb 0b       	sbc	r27, r27
 c20:	80 2d       	mov	r24, r0
 c22:	bf 01       	movw	r22, r30
 c24:	ff 27       	eor	r31, r31
 c26:	93 58       	subi	r25, 0x83	; 131
 c28:	5f 4f       	sbci	r21, 0xFF	; 255
 c2a:	3a f0       	brmi	.+14     	; 0xc3a <__divsf3_pse+0x70>
 c2c:	9e 3f       	cpi	r25, 0xFE	; 254
 c2e:	51 05       	cpc	r21, r1
 c30:	78 f0       	brcs	.+30     	; 0xc50 <__divsf3_pse+0x86>
 c32:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__fp_inf>
 c36:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__fp_szero>
 c3a:	5f 3f       	cpi	r21, 0xFF	; 255
 c3c:	e4 f3       	brlt	.-8      	; 0xc36 <__divsf3_pse+0x6c>
 c3e:	98 3e       	cpi	r25, 0xE8	; 232
 c40:	d4 f3       	brlt	.-12     	; 0xc36 <__divsf3_pse+0x6c>
 c42:	86 95       	lsr	r24
 c44:	77 95       	ror	r23
 c46:	67 95       	ror	r22
 c48:	b7 95       	ror	r27
 c4a:	f7 95       	ror	r31
 c4c:	9f 5f       	subi	r25, 0xFF	; 255
 c4e:	c9 f7       	brne	.-14     	; 0xc42 <__divsf3_pse+0x78>
 c50:	88 0f       	add	r24, r24
 c52:	91 1d       	adc	r25, r1
 c54:	96 95       	lsr	r25
 c56:	87 95       	ror	r24
 c58:	97 f9       	bld	r25, 7
 c5a:	08 95       	ret
 c5c:	e1 e0       	ldi	r30, 0x01	; 1
 c5e:	66 0f       	add	r22, r22
 c60:	77 1f       	adc	r23, r23
 c62:	88 1f       	adc	r24, r24
 c64:	bb 1f       	adc	r27, r27
 c66:	62 17       	cp	r22, r18
 c68:	73 07       	cpc	r23, r19
 c6a:	84 07       	cpc	r24, r20
 c6c:	ba 07       	cpc	r27, r26
 c6e:	20 f0       	brcs	.+8      	; 0xc78 <__divsf3_pse+0xae>
 c70:	62 1b       	sub	r22, r18
 c72:	73 0b       	sbc	r23, r19
 c74:	84 0b       	sbc	r24, r20
 c76:	ba 0b       	sbc	r27, r26
 c78:	ee 1f       	adc	r30, r30
 c7a:	88 f7       	brcc	.-30     	; 0xc5e <__divsf3_pse+0x94>
 c7c:	e0 95       	com	r30
 c7e:	08 95       	ret

00000c80 <__fixsfsi>:
 c80:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fixunssfsi>
 c84:	68 94       	set
 c86:	b1 11       	cpse	r27, r1
 c88:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__fp_szero>
 c8c:	08 95       	ret

00000c8e <__fixunssfsi>:
 c8e:	0e 94 07 07 	call	0xe0e	; 0xe0e <__fp_splitA>
 c92:	88 f0       	brcs	.+34     	; 0xcb6 <__fixunssfsi+0x28>
 c94:	9f 57       	subi	r25, 0x7F	; 127
 c96:	98 f0       	brcs	.+38     	; 0xcbe <__fixunssfsi+0x30>
 c98:	b9 2f       	mov	r27, r25
 c9a:	99 27       	eor	r25, r25
 c9c:	b7 51       	subi	r27, 0x17	; 23
 c9e:	b0 f0       	brcs	.+44     	; 0xccc <__fixunssfsi+0x3e>
 ca0:	e1 f0       	breq	.+56     	; 0xcda <__fixunssfsi+0x4c>
 ca2:	66 0f       	add	r22, r22
 ca4:	77 1f       	adc	r23, r23
 ca6:	88 1f       	adc	r24, r24
 ca8:	99 1f       	adc	r25, r25
 caa:	1a f0       	brmi	.+6      	; 0xcb2 <__fixunssfsi+0x24>
 cac:	ba 95       	dec	r27
 cae:	c9 f7       	brne	.-14     	; 0xca2 <__fixunssfsi+0x14>
 cb0:	14 c0       	rjmp	.+40     	; 0xcda <__fixunssfsi+0x4c>
 cb2:	b1 30       	cpi	r27, 0x01	; 1
 cb4:	91 f0       	breq	.+36     	; 0xcda <__fixunssfsi+0x4c>
 cb6:	0e 94 21 07 	call	0xe42	; 0xe42 <__fp_zero>
 cba:	b1 e0       	ldi	r27, 0x01	; 1
 cbc:	08 95       	ret
 cbe:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__fp_zero>
 cc2:	67 2f       	mov	r22, r23
 cc4:	78 2f       	mov	r23, r24
 cc6:	88 27       	eor	r24, r24
 cc8:	b8 5f       	subi	r27, 0xF8	; 248
 cca:	39 f0       	breq	.+14     	; 0xcda <__fixunssfsi+0x4c>
 ccc:	b9 3f       	cpi	r27, 0xF9	; 249
 cce:	cc f3       	brlt	.-14     	; 0xcc2 <__fixunssfsi+0x34>
 cd0:	86 95       	lsr	r24
 cd2:	77 95       	ror	r23
 cd4:	67 95       	ror	r22
 cd6:	b3 95       	inc	r27
 cd8:	d9 f7       	brne	.-10     	; 0xcd0 <__fixunssfsi+0x42>
 cda:	3e f4       	brtc	.+14     	; 0xcea <__fixunssfsi+0x5c>
 cdc:	90 95       	com	r25
 cde:	80 95       	com	r24
 ce0:	70 95       	com	r23
 ce2:	61 95       	neg	r22
 ce4:	7f 4f       	sbci	r23, 0xFF	; 255
 ce6:	8f 4f       	sbci	r24, 0xFF	; 255
 ce8:	9f 4f       	sbci	r25, 0xFF	; 255
 cea:	08 95       	ret

00000cec <__floatunsisf>:
 cec:	e8 94       	clt
 cee:	09 c0       	rjmp	.+18     	; 0xd02 <__floatsisf+0x12>

00000cf0 <__floatsisf>:
 cf0:	97 fb       	bst	r25, 7
 cf2:	3e f4       	brtc	.+14     	; 0xd02 <__floatsisf+0x12>
 cf4:	90 95       	com	r25
 cf6:	80 95       	com	r24
 cf8:	70 95       	com	r23
 cfa:	61 95       	neg	r22
 cfc:	7f 4f       	sbci	r23, 0xFF	; 255
 cfe:	8f 4f       	sbci	r24, 0xFF	; 255
 d00:	9f 4f       	sbci	r25, 0xFF	; 255
 d02:	99 23       	and	r25, r25
 d04:	a9 f0       	breq	.+42     	; 0xd30 <__floatsisf+0x40>
 d06:	f9 2f       	mov	r31, r25
 d08:	96 e9       	ldi	r25, 0x96	; 150
 d0a:	bb 27       	eor	r27, r27
 d0c:	93 95       	inc	r25
 d0e:	f6 95       	lsr	r31
 d10:	87 95       	ror	r24
 d12:	77 95       	ror	r23
 d14:	67 95       	ror	r22
 d16:	b7 95       	ror	r27
 d18:	f1 11       	cpse	r31, r1
 d1a:	f8 cf       	rjmp	.-16     	; 0xd0c <__floatsisf+0x1c>
 d1c:	fa f4       	brpl	.+62     	; 0xd5c <__floatsisf+0x6c>
 d1e:	bb 0f       	add	r27, r27
 d20:	11 f4       	brne	.+4      	; 0xd26 <__floatsisf+0x36>
 d22:	60 ff       	sbrs	r22, 0
 d24:	1b c0       	rjmp	.+54     	; 0xd5c <__floatsisf+0x6c>
 d26:	6f 5f       	subi	r22, 0xFF	; 255
 d28:	7f 4f       	sbci	r23, 0xFF	; 255
 d2a:	8f 4f       	sbci	r24, 0xFF	; 255
 d2c:	9f 4f       	sbci	r25, 0xFF	; 255
 d2e:	16 c0       	rjmp	.+44     	; 0xd5c <__floatsisf+0x6c>
 d30:	88 23       	and	r24, r24
 d32:	11 f0       	breq	.+4      	; 0xd38 <__floatsisf+0x48>
 d34:	96 e9       	ldi	r25, 0x96	; 150
 d36:	11 c0       	rjmp	.+34     	; 0xd5a <__floatsisf+0x6a>
 d38:	77 23       	and	r23, r23
 d3a:	21 f0       	breq	.+8      	; 0xd44 <__floatsisf+0x54>
 d3c:	9e e8       	ldi	r25, 0x8E	; 142
 d3e:	87 2f       	mov	r24, r23
 d40:	76 2f       	mov	r23, r22
 d42:	05 c0       	rjmp	.+10     	; 0xd4e <__floatsisf+0x5e>
 d44:	66 23       	and	r22, r22
 d46:	71 f0       	breq	.+28     	; 0xd64 <__floatsisf+0x74>
 d48:	96 e8       	ldi	r25, 0x86	; 134
 d4a:	86 2f       	mov	r24, r22
 d4c:	70 e0       	ldi	r23, 0x00	; 0
 d4e:	60 e0       	ldi	r22, 0x00	; 0
 d50:	2a f0       	brmi	.+10     	; 0xd5c <__floatsisf+0x6c>
 d52:	9a 95       	dec	r25
 d54:	66 0f       	add	r22, r22
 d56:	77 1f       	adc	r23, r23
 d58:	88 1f       	adc	r24, r24
 d5a:	da f7       	brpl	.-10     	; 0xd52 <__floatsisf+0x62>
 d5c:	88 0f       	add	r24, r24
 d5e:	96 95       	lsr	r25
 d60:	87 95       	ror	r24
 d62:	97 f9       	bld	r25, 7
 d64:	08 95       	ret

00000d66 <__fp_cmp>:
 d66:	99 0f       	add	r25, r25
 d68:	00 08       	sbc	r0, r0
 d6a:	55 0f       	add	r21, r21
 d6c:	aa 0b       	sbc	r26, r26
 d6e:	e0 e8       	ldi	r30, 0x80	; 128
 d70:	fe ef       	ldi	r31, 0xFE	; 254
 d72:	16 16       	cp	r1, r22
 d74:	17 06       	cpc	r1, r23
 d76:	e8 07       	cpc	r30, r24
 d78:	f9 07       	cpc	r31, r25
 d7a:	c0 f0       	brcs	.+48     	; 0xdac <__fp_cmp+0x46>
 d7c:	12 16       	cp	r1, r18
 d7e:	13 06       	cpc	r1, r19
 d80:	e4 07       	cpc	r30, r20
 d82:	f5 07       	cpc	r31, r21
 d84:	98 f0       	brcs	.+38     	; 0xdac <__fp_cmp+0x46>
 d86:	62 1b       	sub	r22, r18
 d88:	73 0b       	sbc	r23, r19
 d8a:	84 0b       	sbc	r24, r20
 d8c:	95 0b       	sbc	r25, r21
 d8e:	39 f4       	brne	.+14     	; 0xd9e <__fp_cmp+0x38>
 d90:	0a 26       	eor	r0, r26
 d92:	61 f0       	breq	.+24     	; 0xdac <__fp_cmp+0x46>
 d94:	23 2b       	or	r18, r19
 d96:	24 2b       	or	r18, r20
 d98:	25 2b       	or	r18, r21
 d9a:	21 f4       	brne	.+8      	; 0xda4 <__fp_cmp+0x3e>
 d9c:	08 95       	ret
 d9e:	0a 26       	eor	r0, r26
 da0:	09 f4       	brne	.+2      	; 0xda4 <__fp_cmp+0x3e>
 da2:	a1 40       	sbci	r26, 0x01	; 1
 da4:	a6 95       	lsr	r26
 da6:	8f ef       	ldi	r24, 0xFF	; 255
 da8:	81 1d       	adc	r24, r1
 daa:	81 1d       	adc	r24, r1
 dac:	08 95       	ret

00000dae <__fp_inf>:
 dae:	97 f9       	bld	r25, 7
 db0:	9f 67       	ori	r25, 0x7F	; 127
 db2:	80 e8       	ldi	r24, 0x80	; 128
 db4:	70 e0       	ldi	r23, 0x00	; 0
 db6:	60 e0       	ldi	r22, 0x00	; 0
 db8:	08 95       	ret

00000dba <__fp_nan>:
 dba:	9f ef       	ldi	r25, 0xFF	; 255
 dbc:	80 ec       	ldi	r24, 0xC0	; 192
 dbe:	08 95       	ret

00000dc0 <__fp_pscA>:
 dc0:	00 24       	eor	r0, r0
 dc2:	0a 94       	dec	r0
 dc4:	16 16       	cp	r1, r22
 dc6:	17 06       	cpc	r1, r23
 dc8:	18 06       	cpc	r1, r24
 dca:	09 06       	cpc	r0, r25
 dcc:	08 95       	ret

00000dce <__fp_pscB>:
 dce:	00 24       	eor	r0, r0
 dd0:	0a 94       	dec	r0
 dd2:	12 16       	cp	r1, r18
 dd4:	13 06       	cpc	r1, r19
 dd6:	14 06       	cpc	r1, r20
 dd8:	05 06       	cpc	r0, r21
 dda:	08 95       	ret

00000ddc <__fp_round>:
 ddc:	09 2e       	mov	r0, r25
 dde:	03 94       	inc	r0
 de0:	00 0c       	add	r0, r0
 de2:	11 f4       	brne	.+4      	; 0xde8 <__fp_round+0xc>
 de4:	88 23       	and	r24, r24
 de6:	52 f0       	brmi	.+20     	; 0xdfc <__fp_round+0x20>
 de8:	bb 0f       	add	r27, r27
 dea:	40 f4       	brcc	.+16     	; 0xdfc <__fp_round+0x20>
 dec:	bf 2b       	or	r27, r31
 dee:	11 f4       	brne	.+4      	; 0xdf4 <__fp_round+0x18>
 df0:	60 ff       	sbrs	r22, 0
 df2:	04 c0       	rjmp	.+8      	; 0xdfc <__fp_round+0x20>
 df4:	6f 5f       	subi	r22, 0xFF	; 255
 df6:	7f 4f       	sbci	r23, 0xFF	; 255
 df8:	8f 4f       	sbci	r24, 0xFF	; 255
 dfa:	9f 4f       	sbci	r25, 0xFF	; 255
 dfc:	08 95       	ret

00000dfe <__fp_split3>:
 dfe:	57 fd       	sbrc	r21, 7
 e00:	90 58       	subi	r25, 0x80	; 128
 e02:	44 0f       	add	r20, r20
 e04:	55 1f       	adc	r21, r21
 e06:	59 f0       	breq	.+22     	; 0xe1e <__fp_splitA+0x10>
 e08:	5f 3f       	cpi	r21, 0xFF	; 255
 e0a:	71 f0       	breq	.+28     	; 0xe28 <__fp_splitA+0x1a>
 e0c:	47 95       	ror	r20

00000e0e <__fp_splitA>:
 e0e:	88 0f       	add	r24, r24
 e10:	97 fb       	bst	r25, 7
 e12:	99 1f       	adc	r25, r25
 e14:	61 f0       	breq	.+24     	; 0xe2e <__fp_splitA+0x20>
 e16:	9f 3f       	cpi	r25, 0xFF	; 255
 e18:	79 f0       	breq	.+30     	; 0xe38 <__fp_splitA+0x2a>
 e1a:	87 95       	ror	r24
 e1c:	08 95       	ret
 e1e:	12 16       	cp	r1, r18
 e20:	13 06       	cpc	r1, r19
 e22:	14 06       	cpc	r1, r20
 e24:	55 1f       	adc	r21, r21
 e26:	f2 cf       	rjmp	.-28     	; 0xe0c <__fp_split3+0xe>
 e28:	46 95       	lsr	r20
 e2a:	f1 df       	rcall	.-30     	; 0xe0e <__fp_splitA>
 e2c:	08 c0       	rjmp	.+16     	; 0xe3e <__fp_splitA+0x30>
 e2e:	16 16       	cp	r1, r22
 e30:	17 06       	cpc	r1, r23
 e32:	18 06       	cpc	r1, r24
 e34:	99 1f       	adc	r25, r25
 e36:	f1 cf       	rjmp	.-30     	; 0xe1a <__fp_splitA+0xc>
 e38:	86 95       	lsr	r24
 e3a:	71 05       	cpc	r23, r1
 e3c:	61 05       	cpc	r22, r1
 e3e:	08 94       	sec
 e40:	08 95       	ret

00000e42 <__fp_zero>:
 e42:	e8 94       	clt

00000e44 <__fp_szero>:
 e44:	bb 27       	eor	r27, r27
 e46:	66 27       	eor	r22, r22
 e48:	77 27       	eor	r23, r23
 e4a:	cb 01       	movw	r24, r22
 e4c:	97 f9       	bld	r25, 7
 e4e:	08 95       	ret

00000e50 <__gesf2>:
 e50:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fp_cmp>
 e54:	08 f4       	brcc	.+2      	; 0xe58 <__gesf2+0x8>
 e56:	8f ef       	ldi	r24, 0xFF	; 255
 e58:	08 95       	ret

00000e5a <__mulsf3>:
 e5a:	0e 94 40 07 	call	0xe80	; 0xe80 <__mulsf3x>
 e5e:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_round>
 e62:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__fp_pscA>
 e66:	38 f0       	brcs	.+14     	; 0xe76 <__mulsf3+0x1c>
 e68:	0e 94 e7 06 	call	0xdce	; 0xdce <__fp_pscB>
 e6c:	20 f0       	brcs	.+8      	; 0xe76 <__mulsf3+0x1c>
 e6e:	95 23       	and	r25, r21
 e70:	11 f0       	breq	.+4      	; 0xe76 <__mulsf3+0x1c>
 e72:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__fp_inf>
 e76:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_nan>
 e7a:	11 24       	eor	r1, r1
 e7c:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__fp_szero>

00000e80 <__mulsf3x>:
 e80:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__fp_split3>
 e84:	70 f3       	brcs	.-36     	; 0xe62 <__mulsf3+0x8>

00000e86 <__mulsf3_pse>:
 e86:	95 9f       	mul	r25, r21
 e88:	c1 f3       	breq	.-16     	; 0xe7a <__mulsf3+0x20>
 e8a:	95 0f       	add	r25, r21
 e8c:	50 e0       	ldi	r21, 0x00	; 0
 e8e:	55 1f       	adc	r21, r21
 e90:	62 9f       	mul	r22, r18
 e92:	f0 01       	movw	r30, r0
 e94:	72 9f       	mul	r23, r18
 e96:	bb 27       	eor	r27, r27
 e98:	f0 0d       	add	r31, r0
 e9a:	b1 1d       	adc	r27, r1
 e9c:	63 9f       	mul	r22, r19
 e9e:	aa 27       	eor	r26, r26
 ea0:	f0 0d       	add	r31, r0
 ea2:	b1 1d       	adc	r27, r1
 ea4:	aa 1f       	adc	r26, r26
 ea6:	64 9f       	mul	r22, r20
 ea8:	66 27       	eor	r22, r22
 eaa:	b0 0d       	add	r27, r0
 eac:	a1 1d       	adc	r26, r1
 eae:	66 1f       	adc	r22, r22
 eb0:	82 9f       	mul	r24, r18
 eb2:	22 27       	eor	r18, r18
 eb4:	b0 0d       	add	r27, r0
 eb6:	a1 1d       	adc	r26, r1
 eb8:	62 1f       	adc	r22, r18
 eba:	73 9f       	mul	r23, r19
 ebc:	b0 0d       	add	r27, r0
 ebe:	a1 1d       	adc	r26, r1
 ec0:	62 1f       	adc	r22, r18
 ec2:	83 9f       	mul	r24, r19
 ec4:	a0 0d       	add	r26, r0
 ec6:	61 1d       	adc	r22, r1
 ec8:	22 1f       	adc	r18, r18
 eca:	74 9f       	mul	r23, r20
 ecc:	33 27       	eor	r19, r19
 ece:	a0 0d       	add	r26, r0
 ed0:	61 1d       	adc	r22, r1
 ed2:	23 1f       	adc	r18, r19
 ed4:	84 9f       	mul	r24, r20
 ed6:	60 0d       	add	r22, r0
 ed8:	21 1d       	adc	r18, r1
 eda:	82 2f       	mov	r24, r18
 edc:	76 2f       	mov	r23, r22
 ede:	6a 2f       	mov	r22, r26
 ee0:	11 24       	eor	r1, r1
 ee2:	9f 57       	subi	r25, 0x7F	; 127
 ee4:	50 40       	sbci	r21, 0x00	; 0
 ee6:	9a f0       	brmi	.+38     	; 0xf0e <__mulsf3_pse+0x88>
 ee8:	f1 f0       	breq	.+60     	; 0xf26 <__mulsf3_pse+0xa0>
 eea:	88 23       	and	r24, r24
 eec:	4a f0       	brmi	.+18     	; 0xf00 <__mulsf3_pse+0x7a>
 eee:	ee 0f       	add	r30, r30
 ef0:	ff 1f       	adc	r31, r31
 ef2:	bb 1f       	adc	r27, r27
 ef4:	66 1f       	adc	r22, r22
 ef6:	77 1f       	adc	r23, r23
 ef8:	88 1f       	adc	r24, r24
 efa:	91 50       	subi	r25, 0x01	; 1
 efc:	50 40       	sbci	r21, 0x00	; 0
 efe:	a9 f7       	brne	.-22     	; 0xeea <__mulsf3_pse+0x64>
 f00:	9e 3f       	cpi	r25, 0xFE	; 254
 f02:	51 05       	cpc	r21, r1
 f04:	80 f0       	brcs	.+32     	; 0xf26 <__mulsf3_pse+0xa0>
 f06:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__fp_inf>
 f0a:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__fp_szero>
 f0e:	5f 3f       	cpi	r21, 0xFF	; 255
 f10:	e4 f3       	brlt	.-8      	; 0xf0a <__mulsf3_pse+0x84>
 f12:	98 3e       	cpi	r25, 0xE8	; 232
 f14:	d4 f3       	brlt	.-12     	; 0xf0a <__mulsf3_pse+0x84>
 f16:	86 95       	lsr	r24
 f18:	77 95       	ror	r23
 f1a:	67 95       	ror	r22
 f1c:	b7 95       	ror	r27
 f1e:	f7 95       	ror	r31
 f20:	e7 95       	ror	r30
 f22:	9f 5f       	subi	r25, 0xFF	; 255
 f24:	c1 f7       	brne	.-16     	; 0xf16 <__mulsf3_pse+0x90>
 f26:	fe 2b       	or	r31, r30
 f28:	88 0f       	add	r24, r24
 f2a:	91 1d       	adc	r25, r1
 f2c:	96 95       	lsr	r25
 f2e:	87 95       	ror	r24
 f30:	97 f9       	bld	r25, 7
 f32:	08 95       	ret

00000f34 <itoa>:
 f34:	45 32       	cpi	r20, 0x25	; 37
 f36:	51 05       	cpc	r21, r1
 f38:	20 f4       	brcc	.+8      	; 0xf42 <itoa+0xe>
 f3a:	42 30       	cpi	r20, 0x02	; 2
 f3c:	10 f0       	brcs	.+4      	; 0xf42 <itoa+0xe>
 f3e:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__itoa_ncheck>
 f42:	fb 01       	movw	r30, r22
 f44:	10 82       	st	Z, r1
 f46:	cb 01       	movw	r24, r22
 f48:	08 95       	ret

00000f4a <__itoa_ncheck>:
 f4a:	bb 27       	eor	r27, r27
 f4c:	4a 30       	cpi	r20, 0x0A	; 10
 f4e:	31 f4       	brne	.+12     	; 0xf5c <__itoa_ncheck+0x12>
 f50:	99 23       	and	r25, r25
 f52:	22 f4       	brpl	.+8      	; 0xf5c <__itoa_ncheck+0x12>
 f54:	bd e2       	ldi	r27, 0x2D	; 45
 f56:	90 95       	com	r25
 f58:	81 95       	neg	r24
 f5a:	9f 4f       	sbci	r25, 0xFF	; 255
 f5c:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__utoa_common>

00000f60 <__utoa_ncheck>:
 f60:	bb 27       	eor	r27, r27

00000f62 <__utoa_common>:
 f62:	fb 01       	movw	r30, r22
 f64:	55 27       	eor	r21, r21
 f66:	aa 27       	eor	r26, r26
 f68:	88 0f       	add	r24, r24
 f6a:	99 1f       	adc	r25, r25
 f6c:	aa 1f       	adc	r26, r26
 f6e:	a4 17       	cp	r26, r20
 f70:	10 f0       	brcs	.+4      	; 0xf76 <__utoa_common+0x14>
 f72:	a4 1b       	sub	r26, r20
 f74:	83 95       	inc	r24
 f76:	50 51       	subi	r21, 0x10	; 16
 f78:	b9 f7       	brne	.-18     	; 0xf68 <__utoa_common+0x6>
 f7a:	a0 5d       	subi	r26, 0xD0	; 208
 f7c:	aa 33       	cpi	r26, 0x3A	; 58
 f7e:	08 f0       	brcs	.+2      	; 0xf82 <__utoa_common+0x20>
 f80:	a9 5d       	subi	r26, 0xD9	; 217
 f82:	a1 93       	st	Z+, r26
 f84:	00 97       	sbiw	r24, 0x00	; 0
 f86:	79 f7       	brne	.-34     	; 0xf66 <__utoa_common+0x4>
 f88:	b1 11       	cpse	r27, r1
 f8a:	b1 93       	st	Z+, r27
 f8c:	11 92       	st	Z+, r1
 f8e:	cb 01       	movw	r24, r22
 f90:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <strrev>

00000f94 <strrev>:
 f94:	dc 01       	movw	r26, r24
 f96:	fc 01       	movw	r30, r24
 f98:	67 2f       	mov	r22, r23
 f9a:	71 91       	ld	r23, Z+
 f9c:	77 23       	and	r23, r23
 f9e:	e1 f7       	brne	.-8      	; 0xf98 <strrev+0x4>
 fa0:	32 97       	sbiw	r30, 0x02	; 2
 fa2:	04 c0       	rjmp	.+8      	; 0xfac <strrev+0x18>
 fa4:	7c 91       	ld	r23, X
 fa6:	6d 93       	st	X+, r22
 fa8:	70 83       	st	Z, r23
 faa:	62 91       	ld	r22, -Z
 fac:	ae 17       	cp	r26, r30
 fae:	bf 07       	cpc	r27, r31
 fb0:	c8 f3       	brcs	.-14     	; 0xfa4 <strrev+0x10>
 fb2:	08 95       	ret

00000fb4 <_exit>:
 fb4:	f8 94       	cli

00000fb6 <__stop_program>:
 fb6:	ff cf       	rjmp	.-2      	; 0xfb6 <__stop_program>
